
 // ///////////////////////////////////////////////////////////////////////////


-- Summary of Array Notes:


-- to add/remove elements:

.push(...items) - adds items to the end of an array.

.pop() - removes the last item from an array.

.shift() - removes the first item from an array.

.unshift(...items) - adds items to the beginning of an array.

.splice(pos, deleteCount, ...items) 
- at index pos delete deleteCount elements and insert ...items.

.slice(start, end) - creates a new array, 
- copies elements from index start till end (end not inclusive) into it.

.concat(...items) - creates a new array, 
- copies all members of the current one and adds ...items to it,
- if any of ...items is an array, then its elements are taken too.

// //////


-- to search among elements:

.indexOf/lastIndexOf(item, pos) - look for item starting from position pos.
- returns the index or -1 if not found.

.includes(value) - returns true if the array has value, otherwise false.

.find/filter(func) - filter elements through the function,
- returns the first/all values that make it return true.

.findIndex(func) - is like find, but returns the index instead of a value.

// //////


-- to iterate over elements:

.forEach(func) - calls func for every element, does not return anything.
- unless you use a return statement, for an array of results. etc.

// //////


-- to transform the array:

.map(func) - creates new array from results of calling func for every element.

.sort(func) - sorts the array in place, then returns it.

.reverse() - reverses the array in place, then returns it.

.split/join(delim) - converts a string to array and back.
- determined by a delimiter. ex:   "1;2;3".split(";") returns ["1", "2", "3"].

.reduce/reduceRight(func, initial) 
- calculate a single value over the array by calling func for each element,
- and passing an intermediate result between the calls.

// //////


-- additional methods:

Array.isArray(value) - checks value for being an array.

// ////////////////////////////////////////////////////////////////////////////


-- those were the most common methods, these are a few more:


array.some(func) - check the array for elements that satisfy the condition.

array.every(func) - check the array for elements that satisfy the condition.


-- .some(func) and .every(func) notes:
 
 - function (func) is called on each element of the array, similar to .map()
 
   - if any or all results are true, returns true, otherwise false.


 - these methods behave sort of like || and && operators:
 
   - if func returns a truthy value:
   .some() immediately returns true and stops iterating over the array.

   - if func returns a falsy value, 
   .every() immediately returns false and stops iterating over the array too.


-- code ex. using every() to compare arrays:

function arraysEqual(arr1, arr2) {
    return arr1.length === arr2.length 
    && arr1.every((value, index) => value === arr2[index]);
}

console.log( arraysEqual([1, 2], [2, 1])); // true

// //////


arr.fill(value, start, end) - fills the array with repeating value,
- from index start to end.

// //////


arr.copyWithin(target, start, end) - copies its elements from position start
- till position end into itself, at position target (overwrites existing).

// //////


arr.flat(depth) - creates a new flat array from a multidimensional array.
- a multidimensional array ex. is:  [1, 2, [3, 4]].
- an array within an array, becomes a single array ex.:  [1, 2, 3, 4].

// ////////////////////////////////////////////////////////////////////////////


-- NB
 - please note:

 - the methods sort, reverse and splice modify the array itself.


// ////////////////////////////////////////////////////////////////////////////


-- Fisher-Yates Shuffle (a more equal probability shuffle)


-- General Shuffle:

function shuffle(array) {
  array.sort(() => Math.random() - 0.5);
}

general random with random probability:

 123: 374292
 132: 62819
 213: 124743
 231: 62206
 312: 62761
 321: 313179

 // //////


-- Fisher Yates Shuffle

 function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i

    // swap elements array[i] and array[j]
    // we use "destructuring assignment" syntax to achieve that
    // you'll find more details about that syntax in later chapters
    // same can be written as:
    // let t = array[i]; array[i] = array[j]; array[j] = t
    [array[i], array[j]] = [array[j], array[i]];
  }
}

 fisher yates shuffle: (equal probability randomization:

 123: 166767
 132: 166727
 213: 165860
 231: 166470
 312: 167013
 321: 167163

 - The idea is to walk the array in the reverse order 
 
   - and swap each element with a random one before it:


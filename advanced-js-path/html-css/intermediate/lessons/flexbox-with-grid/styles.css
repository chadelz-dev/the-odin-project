/* Example 1 - Basic Grid */
.layout {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 10px;
  margin-bottom: 100px;
}
.child {
  min-height: 100px;
  background: pink;
}

/* Example 2 - Combining Flexbox and Grid */
.layout-two {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-gap: 8px;
}
.child-two {
  background: orange;
  text-align: center;
  padding: 25px;
  display: flex;
  justify-content: space-between;
}
.last-row-two {
  grid-column: 1 / 3;
}
.child-two > div {
  height: 50px;
  background: darkred;
  flex: 0 1 30%;
}
/*

-- Some Notes on when to use Flexbox and when to use Grid

-- 1. Content First vs. Layout Design

 - key decision point:
 
 - does your design with the content or the layout first?


   - Content First:

     - focus on how content behaves - grows, shrinks, aligning etc

     - flexbox excels, is dynamic and adjusts the layout based on content rules


   - Layout First:

     - grid allows you to define the structure first, then add content

     - gives you precise control over the rows and columns

// ////////////////////////////////////////////////////////////////////////////


-- example 1: One Dimensional Layout with Grid

 - using grid to achieve a one dimensional layout usually done with flexbox


 - display: grid 

   - creates a grid container


 - grid-template-columns: 1fr 1fr 1fr

   - creates a grid with 3 equal columns


 - each .child element fills one column, forming a horziontal layout.

 - gap: 10px adds spacing between the items

// ////////////////////////////////////////////////////////////////////////////


-- example 2: Combining Flexbox and Grid

 - gives you a powerful approach to building layouts.

 - basically a 2 dimensional grid layout 

   - where each grid item contains flexbox content


-- Grid Setup

 - display: grid and grid-template-columns: 1fr 1fr

   - create a grid with a 2 column layout


 - .last-row-two

   - uses grid-column: 1 / 3 to span the last column

   - froming a 2 row grid with 2 items in row 1 and 1 item in row 2


 - grid-gap: 8px

   - adds spacing between the grid items


-- Flexbox Setup

 - .child elements
   
   - are a flexbox container with display: flex


 - justify-content: space-between 
 
   - spreads the three <div> children evenly


 - flex: 0 1 30% 
 
   - sets each child to shrink (but not grow) with a base width of 30%


*/

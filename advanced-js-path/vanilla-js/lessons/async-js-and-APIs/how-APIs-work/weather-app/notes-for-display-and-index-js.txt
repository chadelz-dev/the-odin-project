// ////////////////////////////////////////////////////////////////////////////


-- module 6 ( display logic):

 - manages the DOM updates for weather data and city suggestions,

   - ensuring maintainable and isolated UI logic (SRP).


-- code:

export function displayWeather(data, weatherDisplay) {
  if (data) {
    weatherDisplay.innerHTML = `
      <p>Temperature: ${data.temperature} °C</p>
      <p>Wind Speed: ${data.windSpeed} km/h</p>
    `;
  } else {
    weatherDisplay.innerHTML = "<p>Error fetching weather data.</p>";
  }
}

export function displaySuggestions(cities, suggestionsDiv, cityInput, fetchWeather, displayWeather) {
  suggestionsDiv.innerHTML = "";
  if (cities.length === 0) return;

  cities.forEach(city => {
    const suggestion = document.createElement("div");
    suggestion.className = "suggestion";
    suggestion.textContent = `${city.name}, ${city.country}`;
    suggestion.addEventListener("click", () => {
      cityInput.value = city.name;
      suggestionsDiv.innerHTML = "";
      fetchWeather(city.latitude, city.longitude).then(data => displayWeather(data, weatherDisplay));
    });
    suggestionsDiv.appendChild(suggestion);
  });
}

// //////


-- explanation:

-- displayWeather(data, weatherDisplay)

 - purpose:

   - updates a DOM element with weather info or an error message.

 - behavior:

   - if data exists, renders temperature (in °C) and wind speed (in km/h).

     - using innerHTML.

   - if data is null, shows "error fetching weather data".

 - why:

   - simple, reusable UI update for weather data.


-- displaySuggestions(cities, suggestionDiv, cityInput, fetchWeather, displayWeather)

 - purpose: creates a dropdown of city suggestions for autocomplete.


 - behavior:

   - clears suggestionDiv with innerHTML = '';.

   - if cities is empty, it exits with a return.

   - for each city, creates a <div> with City, Country and adds a click listener.

     - sets cityInput to city name.

     - clears suggestions.

     - calls fetchWeather(latitude, longitude),

       - then displayWeatrher to show the results.


   - why:

     - dynamic, event-driven suggestions using createElement for,

       - better performance and control.


-- key points:

 - geocoding:

   - cities (from fetchCities) provides name, country, latitude, longitude,
     
     - for suggestions and wearther fetches.


 - design:
 
   - separates UI logic from data fetching, uses innerHTML for simple output,

     - and createElement for dynamic suggestions with event listeners.


 - role:

   - powers the weather apps UI, 

   - handling user input, city suggestions and weather data.  

      // ////////////////////////////////////////////////////////////////////////////


-- module 7 ( main logic and geocoding ):

 - coordinates modules, handling input and drives geocoding to weather query.


-- code:

import { getElement } from "./utils.js";
import { fetchWeather, fetchCities } from "./weather.js";
import { displayWeather, displaySuggestions } from "./display.js";
import "./styles.css";

// Select DOM elements
const cityInput = getElement("#cityInput");
const getWeatherBtn = getElement("#getWeatherBtn");
const weatherDisplay = getElement("#weatherDisplay");
const suggestionsDiv = getElement("#suggestions");

// Event listener for input typing (autocomplete)
cityInput.addEventListener("input", async () => {
  const query = cityInput.value.trim();
  console.log("User input:", query);
  if (query.length < 2) {
    suggestionsDiv.innerHTML = "";
    return;
  }
  const cities = await fetchCities(query);
  console.log("Cities from geocoding:", cities);
  displaySuggestions(cities, suggestionsDiv, cityInput, fetchWeather, displayWeather);
});

// Event listener for button click (fetch weather)
getWeatherBtn.addEventListener("click", async () => {
  const city = cityInput.value.trim();
  console.log("Button clicked with city:", city);
  if (!city) {
    displayWeather(null, weatherDisplay);
    return;
  }
  const cities = await fetchCities(city);
  console.log("Cities for weather fetch:", cities);
  if (cities.length > 0) {
    const { latitude, longitude } = cities[0];
    console.log("Selected coordinates:", { latitude, longitude });
    const data = await fetchWeather(latitude, longitude);
    console.log("Weather data:", data);
    displayWeather(data, weatherDisplay);
  } else {
    displayWeather(null, weatherDisplay);
  }
});

// //////


-- explanation:

-- input field:

 - <input id="cityInput"> : captures city name for geocoding.

 - the input event fires on every keystroke, triggering automcomplete.


-- autocomplete process:

 - step 1:

   - cityInput.addEventListener("input", ...) gets the input value,

     - (query = cityInput.value.trim())


 - step 2:

   - if "query" is 2+ characters, call fetchCities(query) from weather.js

   - imported at the top of the file.


 - step 3:

   - fetchCities sends a request to the geocoding API,

     - https://geocoding-api.open-meteo.com/v1/search?name=${query}&count=5


 - step 4:

   - response eg:
   
   { results: [{ name: "Berlin", latitude: 52.52, longitude: 13.41, country: "Germany" }, ...] }


   - is logged and passed to displaySuggestions.


 - step 5:

   - displaySuggestions creates clickable divs for each city.

 - step 6:

   - clicking a suggestion sets cityInput.value = city.name and,

   - calls fetchWeather(city.latitude, city.longitude) to get weather data.


-- this is coming from the weather.js module fetchWeather function:

export async function fetchWeather(lat, lon) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}¤t=temperature_2m,wind_speed_10m`;
  try {
    const response = await fetch(url);
    const data = await response.json();
    console.log("Raw weather JSON:", data);
    const temperature = data.current.temperature_2m;
    const windSpeed = data.current.wind_speed_10m;
    console.log("Extracted weather data:", { temperature, windSpeed });
    return { temperature, windSpeed };
  } catch (error) {
    console.error("Error fetching weather:", error);
    return null;
  }
}

// //////


-- button click process:

 - step 1:

   - getWeatherBtn.addEventListener("click", ...) 

     - gets city = cityInput.value.trim()


 - step 2: 

   - calls fetchCities(city) to get coordinates.


 - step 3:

   - takes the first city's coordinates (const { lattitude, longitude } = cities[0])


 - step 4:

   - builds weather API URL in fetchWeather function from weather.js

   - const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&t=temperature_2m,wind_speed_10m`;

   - see the fetchWeather function above 


 - step 5:

   - fetches and displays the weather data.


// //////


-- data flow:

 - index.js pulls fetchCities and fetchWeather from weather.js.

 - passes geocoding results to displaySuggestions in display.js.

 - uses coordinates to call fetchWeather from weather.js,
   
   - and displayWeather from display.js.


-- console.logs:

 - track input, geocoding results, coordinates and weather data.


-- decision-making:

 - event listeners on cityInput (input event) and

 - getWeatherBtn (click event).

 - uses first city for simplicity.
// ////////////////////////////////////////////////////////////////////////////


-- what is Webpack and why use it?

 - webpack is a tool that takes all your proj files (js, css, html, images etc)

   - and combines them into a smaller set of optimized files called bundles.

   - these bundles make your website load faster because:

     - the browser downloads fewer files


 - without Webpack:

   - if your project has 10 js files, 5 css files, and 20 images...

     - the browser has to make dozens of requests, slowing things down.

     - Webpack bundles them into: one js file, once css file, and a few images.

       - this reduces requests, speeding things up.

// ////////////////////////////////////////////////////////////////////////////


-- Question, how does bundling make the project smaller if it adds files?

-- before Webpack:

 - src/ directory might have many files (eg: many js files with import statements)

   - the browser would need to download each one separately, which is slow.


-- after Webpack:

 - Webpack combines those files into a single bundle (eg dist/main.js)

   - which contains all the js code.

   - the dist/ directory has fewer files than src/ 

   - and the browser only needs to download the bundle, not the original files.

   - the "extra" files (like dist/main.js) replaces the need for the browser to,

     - fetch all src/ files individually, making a website lighter and faster.


 - its like putting 10 small bags into 1 big bag, it still contains everything.

// ////////////////////////////////////////////////////////////////////////////


--  project overview:

-- goal: 

 - create a webpage showing a product card (eg "wireless headphones")

   - with a name, price and images, 
   - that is styled and displays multiple products from a data file.


-- folder structure:

 - one project called "ecommerce-webpack"

   - deeply nested within "the-odin-project/advanced-js-path/vanilla-js/lessons/webpack/"

 - work in src/ (source files) 
 
 - and webpack will output to dist/ (build or bundled files)

 - a .gitignore file in ecommerce-webpack/ will ensure:

   -  Git ignores unnecessary files like node_modules/ and dist/


-- steps:

 - we add features (js, html, css, images, etc) one at a time

   - building the same app.


-- git intergration:

 - since ecommerce-webpack/ is part of a larger Git repo, (the-odin-project)

 - we will use .gitignore file in ecommerce-webpack/ to:

   - explicitly ignore webpack generated files (dist/) 

   - this is optional but recommended for clarity and

   - to ensure the projects specific ignore rules are self contained.

     - especially in a deeply nested structure.

// ////////////////////////////////////////////////////////////////////////////


-- key concepts (explained simply):

-- bundler: 

 - webpack takes your files and squashes them into fewer files (bundles)

   - so the browser loads a site faster.


-- entry:

 - the main file where webpack puts the bundles files 

   - like the front door of your project/app.


-- loaders:

 - tools that let webpack handle non JS files (like images, css, etc)

   - by turning them into something it can handle.


-- plugins:

 - extra tools that do things like create html files or optimize bundles.


-- mode:

 - "development" makes bundles easy to debug, 

 - "production" makes bundles smaller and faster for real websites.


-- dev server:

 - a tool that auto reloads your webpage when you edit files, 

   - so you don't have to rebuild manually every time you make a change.


-- source map:

 - helps you debug by showing errors in original code, not the bundled version.


-- gitignore:

 - a file that tells Git which files or folders to ingore,

   - eg: node_modules/ , dist/ etc, 

   - so that they are not tracked or commited to the repo.



-- step by step:

 - we will build the project in six steps,

   - each adding to the same app, for each step I'll explain:


   -- what we're doing

   -- files involved

   -- directory structure/shape

   -- how to run the app

   -- git intergration

   -- why it matters

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////


--  step 1 (bundling javascript):

 - create a simple project that logs a product's name to the console.

 - wepack will bundle two js files into one file (dist/main.js)

   - which contains all the code.

   - we will also add a .gitignore file to prevent Git from tracking generated files.

// //////


-- files and their purpose:

-- package.json

 - what:

   - a file that lists your projects settings and dependencies, like webpack.

 - why:

   - npm uses it to track waht tools your project needs.

 - created:

   - auto generated by npm init -y, but you run the command.


-- package-lock.json

 - what:

   - a file that locks the exact versions of dependencies used in your project.

 - why:

   - ensures everyone working on the project, uses the same versions, avoiding bugs.

 - created:

   - auto generated when you install packages (eg: npm install)
 

-- node_modules/

 - what:

   - a folder containing the actual code for webpack and other tools.

 - why:

   - npm downloads these files so webpack can run.

 - created:

   - auto generated by npm install

 - git notes:

   - this folder is large and unnecessary to track in Git.


-- .gitignore

 - what:

   - a file that tells git which files or folders to ignore.

 - why:

   - prevents git from tracking node_modules/ and dist/ folders. (created later)

   - keeps the repo clean

   - makes the project self contained and explicit about its ignore rules,

     - which is useful when the project is deeply nested in the-odin-project.

 - created:

   - you create this manually.


-- src/product.js

 - what:

   - a js file defining a product (name and price)

 - why:

   - holds data we will use in the main file, like a piece of the apps logic.

 - created:

   - created manually.


-- src/index.js

 - what:

   - the main js file (the "entry point" webpack starts with)

 - why:

   - it imports product.js and logs the product data  

     - the starting point, like the main function in other languages.

 - created:

   - created manually


-- webpack.config.js

 - what:

   - a configuration file telling webpack how to bundle your project
   
 - why:

   - specifies the entry point (index.js) 

   - output folder (dist/)

   - and settings like "development" or "production" modes.

 - created:

   - created manually.


-- directory shape before bundling:

the-odin-project/
└── advanced-js/
    └── vanilla-js/
        └── lessons/
            └── webpack/
                └── ecommerce-webpack/
                    ├── .gitignore
                    ├── package.json
                    ├── package-lock.json
                    ├── node_modules/
                    ├── src/
                    │   ├── index.js
                    │   ├── product.js
                    ├── webpack.config.js


-- directory shape after bundling:

the-odin-project/
└── advanced-js/
    └── vanilla-js/
        └── lessons/
            └── webpack/
                └── ecommerce-webpack/
                    ├── .gitignore
                    ├── package.json
                    ├── package-lock.json
                    ├── node_modules/
                    ├── src/
                    │   ├── index.js
                    │   ├── product.js
                    ├── webpack.config.js

                    ├── dist/
                    │   ├── main.js

// ////////////////////////////////////////////////////////////////////////////


-- git intergration:

 - the .gitignore file in ecommerce-webpack/ ensures that node_modules/ (created by npm install)
 
   -  and dist/ (created by npx webpack) are not tracked by Git. This is critical because:

   - node_modules/ can be massive (hundreds of MB) and is regenerated by npm install.

   - dist/ contains generated files that can be recreated by Webpack, 
     
     - so there’s no need to commit them.

 - having a local .gitignore makes the project self-contained, 
 
   - clearly documenting which files to ignore, 

   - even if ecommerce-webpack/ is deeply nested in the-odin-project/.

// //////


-- how to run:

 - create the nested folder structure


 - initialize npm (creates package.json)

   npm init -y


 - install webpack (creates package-lock.json, node_modules/ folder)

   npm install --save-dev webpack webpack-cli


 - create the .gitignore file:

   # Ignore Webpack dependencies and output
   node_modules/
   dist/


 - create the src/product.js file:

   export const product = {
     name: "wireless headphones",
     price: 99.99
   }


 - create the src/index.js file:

   import { product } from "./product.js";

   console.log(product);


 - create the webpack.config.js file:

   module.exports = {
     entry: "./src/index.js",
     output: {
       filename: "main.js",
       path: __dirname + "/dist"
     }
   };


 - run webpack:

   npx webpack


 - run the app (check the output):

   node dist/main.js
  
   - the output should be:

     Product: Wireless headphones, Price: $99.99


 - verify the .gitignore file:

   cd the-odin-project
   git status

   - ensure node_modules/ and dist/ are not tracked by Git.

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////


-- step 2 Handling HTML:

 - adding an html file to display the product card in a browser.

 - we will use a plugin to create dist/index.html automatically.

   - links the html to js bundle.

   - .gitignore ensures dist/ remains untracked.

// //////


-- files and their purpose:

-- src/template.html

 - what:

   - a basic html file that acts as a template for the webpage.

 - why:

   - defines the structure of the page (like a placeholder for the product card) 

   - webpack will copy it to dist/ and add the javascript bundle

 - created:

   - created manually.


-- src/index.js (updated)

 - what:

   - now creates a product card and adds it to the webpage.

 - why:

   - updates the JavaScript to interact with the HTML, 
   
   - making the app visible in the browser.

 - created:

   - update the existing index.js file.


-- webpack.config.js (updated)

 - what:

   - adds the htmlWebpackPlugin to generate dist/index.html

 - why:

   -automates creating the html file and links the main.js file

     - so you dont have to manually add the script tags.

 - created:

   - update the existing webpack.config.js file.


-- dist/index.html

 - what:

   - is the final html file for the browser to use.

 - why:

   - it is a copy of template.html with <script defer src="main.js"></script>

   - this is added so you don't have to manually add the script tag.

 - created:

   - auto generated by webpack (via htmlWebpackPlugin)

 - git note:

   - this file is in dist/ which is ignored by git.


-- new directory shape:

the-odin-project/
└── advanced-js/
    └── vanilla-js/
        └── lessons/
            └── webpack/
                └── ecommerce-webpack/
                    ├── .gitignore
                    ├── package.json
                    ├── package-lock.json
                    ├── node_modules/
                    ├── src/
                    │   ├── index.js
                    │   ├── product.js
                    │   ├── template.html
                    ├── webpack.config.js
                    ├── dist/
                    │   ├── main.js
                    │   ├── index.html


-- why this matters:

 - makes your app visible to the browser, not just the console.

 - the plugin saves you from manually linking JS,

   - which is error-prone in big projects.

 - the .gitignore ensures generated files are not tracked by Git.

// ////////////////////////////////////////////////////////////////////////////


-- how to run:

-- install the plugin:

 - cd to your ecommerce-webpack/ folder and then run:

   npm install --save-dev html-webpack-plugin


-- create src/template.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Product Card</title>
</head>
<body>
  <div id="card-container"></div> <!-- Where the product card will appear -->
</body>
</html>

// //////


-- update src/index.js

import { productData } from "./product.js";

// Creates a product card element
const cardElement = document.createElement("div");
cardElement.innerHTML = `
  <h2>${productData.name}</h2>
  <p>Price: $${productData.price}</p>
`;

// Adds the card to the page
document.getElementById("card-container").appendChild(cardElement);

// //////


-- update webpack.config.js

const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  mode: "development",
  entry: "./src/index.js",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "dist"),
    clean: true
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./src/template.html" // Copies this to dist/index.html
    })
  ]
};

// //////


-- run webpack

   npx webpack


-- open dist/index.html in the browser:

 - now you can see the prodct card (name and price) in the browser.

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////


-- step 3 loading CSS:

 - add css to style the product card (eg background colour, padding etc)

 - webpack will bundle the css into the js bundle,

   - applying styles via javascript.


-- files and their purpose:

-- src/styles.css

 - what:

   - a css file with styles for the product card

 - why:

   - makes the card look nice 
   
 - created:
 
   - created manually.
   

-- src/index.js (updated):

 - what:

   - imports css to include it into the bundle 

 - why:

   - tells webpack to process the css and apply it to the card.

 - created:

   - you update the existing index.js file.
 

-- webpack.config.js (updated):

 - what:

   - adds css-loader and style-loader to handle CSS

 - why:

   - css-loader reads the CSS file,

   - style-loader adds it to the webpage as a <style> tag.

 - created:

   - you update the existing webpack.config.js file.


-- new directory shape:

the-odin-project/
└── advanced-js/
    └── vanilla-js/
        └── lessons/
            └── webpack/
                └── ecommerce-webpack/
                    ├── .gitignore
                    ├── package.json
                    ├── package-lock.json
                    ├── node_modules/
                    ├── src/
                    │   ├── index.js
                    │   ├── product.js
                    │   ├── template.html
                    │   ├── styles.css
                    ├── webpack.config.js
                    ├── dist/
                    │   ├── main.js
                    │   ├── index.html



-- why this matters:

 - css makes the app look professional and polished.

 - bundling CSS into the JS means:

   - the browser doesn't need to download a separate CSS file.

   - keeps things efficient.

 - the .gitignore ensures the growing dist/ folder stays out of git.


-- how to run:

-- install the loader plugins:

 - cd to your ecommerce-webpack/ folder and then run:

   npm install --save-dev style-loader css-loader


-- create src/styles.css:

.card {
  background-color: #e0e0e0; /* Light gray background */
  padding: 10px; /* Space inside the card */
  border-radius: 5px; /* Rounded corners */
  max-width: 200px; /* Limits card width */
}

// //////


-- update src/index.js

import "./styles.css"; // Imports CSS to style the card

cardElement.classList.add("card"); // Applies the CSS class

// //////


-- update webpack.config.js

const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  },
  plugins: [
  ],
  module: {
    rules: [
      {
        test: /\.css$/i, // Finds CSS files
        use: ["style-loader", "css-loader"] // Processes CSS
      }
    ]
  }
;

// ////////////////////////////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////


-- step 4 loading images:

 - images are stored in an images folder within the src/ folder.

 - add a product image to the card, used in three ways.

 - 1. in a css background.

 - 2. in html as an <img> tag.

 - 3. in js as a data url, added dynamically.

 - webpack will bundle the images into the js bundle and fix its file paths.


-- files and their purpose:

-- src/images/product-image.jpg

 - what:

   - an image file 

 - why:

   - displays the product visually, storing it in src/images/ 

     - organizes assets neatly, as is common in real-world projects.

 - created:

   - you add it manually 


-- src/template.html (updated)

 - what:

   - adds an <img> tag to show the image

 - why:

   - shows how webpack processes images in CSS, with the path.

 - created:

   - update the existing template.html file.


-- src/styles.css (updated)

 - what:

   - uses the image as a background

 - why:

   - shows how webpack processes images in CSS, 
   
   - with the path updated to images/product-image.jpg

 - created:

   - update the existing styles.css file.


-- src/index.js (updated)

 - what:

   - imports the image and adds it to the end.

 - why:

   - demonstrates dynamic image loading in js.

   - with the import path updated to images/product-image.jpg

 - created:

   - update the existing index.js file.


-- webpack.config.js (updated)

 - what:

   - adds html-loader for html images and asset/resource for bundling images.

 - why:

   - ensures images are included in the bundle with the correct paths.

   - the configuration remains unchanged, as webpacks asset/resource 

     - handles images regardless of their subfolder.

 - created:

   - update the existing webpack.config.js file.


-- dist/[hashed-image].jpg:

 - what:

   - the bundled image file with a random name (eg: abc123.jpg)

 - why:

   - webpack renames images to avoid browser caching issues.

 - created:

   - auto generated by webpack.

 - git note:

   - this file is in dist/, which is ignored by .gitignore.


-- new directory shape:

the-odin-project/
└── advanced-js/
    └── vanilla-js/
        └── lessons/
            └── webpack/
                └── ecommerce-webpack/
                    ├── .gitignore
                    ├── package.json
                    ├── package-lock.json
                    ├── node_modules/
                    ├── src/
                    │   ├── index.js
                    │   ├── product.js
                    │   ├── template.html
                    │   ├── styles.css
                    │   ├── images/
                    │   │   ├── product-image.png
                    ├── webpack.config.js
                    ├── dist/
                    │   ├── main.js
                    │   ├── index.html
                    │   ├── [hashed-image].png


-- what happens:

 - webpack sees the image referenced in:

   - CSS (url("./images/product-image.jpg"))

   - html (<img src="./images/product-image.jpg">)

   - js (import productImage from "./images/product-image.jpg")


 - html-loader processes <img> tags in index.html 

   - and adjusts the path to point to the bundled image in dist/


 - asset/resource copies src/images/product-image.jpg to dist/

   - with a hashed name (eg: abc123.jpg)

   - and updates all references (in css, html, and js) to use the new path.


 - the browser loads the image correctly from dist/

   - when you open dist/index.html or use the dev server.


-- why the images/ folder doesn't affect webpack:

 - the asset/resource type in webpack.config.js handles images in any subfolder of src/.

 - the regex /\.(png|jpg|jpeg)$/i matches images files regardless of their location

   - eg: src/images/ or src/another-folder/

 - the html-loader and css-loader resolve relative paths

   - (./images/product-image.jpg) correctly, 

   - ensuring webpack finds the images and includes it in the bundle.

 - the only change is updating the file paths in template.html,

   - style.css and index.js to reflect the new images/ folder.


-- the new src/images/product-image.jpg: 

 - is a source file and should be tracked by git.

 - the generated dist/[hashed-image].jpg is not tracked by git,

   - because it is in the .gitignore file.


-- how to run:

-- navigate to the project:

 - cd to the ecommerce-webpack/ folder

   
-- install the loader plugins:

 - npm install --save-dev html-loader 


-- create the images/ folder and add the image:

 - mkdir src/images


-- update src/template.html:

<img src="./images/product-image.png" alt="Product Image"> 


-- update src/styles.css:

.card {
  background: url("./images/product-image.png") no-repeat center; /* Updated path */
  background-size: cover;
  padding: 10px;
  border-radius: 5px;
  max-width: 200px;
  color: white; /* Readable text */
}


-- update src/index.js:

import productImage from "./images/product-image.png"; // Updated path

// Adds image dynamically
const imageElement = document.createElement("img");
imageElement.src = productImage;
imageElement.alt = "Product Image";
cardElement.appendChild(imageElement);



-- update webpack.config.js:

const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  mode: "development",
  entry: "./src/index.js",
  output: {

  },
  plugins: [
  ],
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ["style-loader", "css-loader"]
      },
      {
        test: /\.html$/i, // Handles <img> tags
        loader: "html-loader"
      },
      {
        test: /\.(png|jpg|jpeg)$/i, // Bundles images
        type: "asset/resource"
      }
    ]
  }
};

-- run webpack:

 - npx webpack


 
 



